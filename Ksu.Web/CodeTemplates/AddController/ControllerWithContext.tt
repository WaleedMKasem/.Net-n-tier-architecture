<#@ template language="C#" HostSpecific="True" #>
<#
var Model = (MvcTextTemplateHost)Host;
var routePrefix = String.Empty;
if (!String.IsNullOrWhiteSpace(Model.AreaName)) {
    routePrefix = "/" + Model.AreaName;
}
routePrefix += "/" + Model.ControllerRootName + "/";
#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Objects" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
<# if(MvcTextTemplateHost.NamespaceNeeded(Model.Namespace, Model.ModelType.Namespace)) { #>
using <#= Model.ModelType.Namespace #>;
<# } #>
<# if(Model.ContextType.Namespace != Model.ModelType.Namespace && MvcTextTemplateHost.NamespaceNeeded(Model.Namespace, Model.ContextType.Namespace)) { #>
using <#= Model.ContextType.Namespace #>;
<# } #>
using PagedList;
using PagedList.Mvc;
using Prof.Hr.Common;

namespace <#= Model.Namespace #>
{
<#
    var modelName = Model.ModelType.Name;
    var entitySetName = Model.EntitySetName;
    var modelVariable = modelName.ToLowerInvariant();
    var entitySetVariable = entitySetName.ToLowerInvariant();
    var primaryKey = Model.PrimaryKeys[0];
    var lambdaVar = modelVariable[0];
    var isObjectContext = typeof(ObjectContext).IsAssignableFrom(Model.ContextType);
#>
    public class <#= Model.ControllerName #> : Controller
    {
        private <#= Model.ContextType.Name #> db = new <#= Model.ContextType.Name #>();

        //
        // GET: <#= routePrefix #>

        public ActionResult Index(string search,int? page)
        {
<#  var includeExpressions = "";
    if(isObjectContext) {
        includeExpressions = String.Join("", Model.RelatedProperties.Values.Select(property => String.Format(".Include(\"{0}\")", property.PropertyName)));
    }
    else {
        includeExpressions = String.Join("", Model.RelatedProperties.Values.Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.PropertyName)));
    }
#>
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>
            var <#= entitySetVariable #> = db.<#= entitySetName #><#= includeExpressions #>;
            long empNo;
            long.TryParse(search, out empNo);
            return View(<#= entitySetVariable #>.Where(x => x.EmployeeNo == empNo || string.IsNullOrEmpty(search)).ToList().ToPagedList(page ?? 1,Helper.pageSize));
<# } else { #>
            long empNo;
            long.TryParse(search, out empNo);
            return View(db.<#= entitySetName #><#= includeExpressions #>.Where(x => x.EmployeeNo == empNo || string.IsNullOrEmpty(search)).ToList().ToPagedList(page ?? 1,Helper.pageSize));
<# } #>
        }

        //
        // GET: <#= routePrefix #>Create

        public ActionResult Create()
        {
<# foreach (var property in Model.RelatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyName #> = new SelectList(db.<#= property.EntitySetName #>, "<#= property.PrimaryKey #>", "<#= property.DisplayPropertyName #>");
<# } #>
            return View();
        }

        //
        // POST: <#= routePrefix #>Create

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid)
            {
<# if(primaryKey.Type == typeof(Guid)) { #>
                <#= modelVariable #>.<#= primaryKey.Name #> = Guid.NewGuid();
<# } #>
<# if(isObjectContext) { #>
                db.<#= entitySetName #>.AddObject(<#= modelVariable #>);
<# } else { #>
                db.<#= entitySetName #>.Add(<#= modelVariable #>);
<# } #>
                db.SaveChanges();
                return RedirectToAction("Index");
            }

<# foreach (var property in Model.RelatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyName #> = new SelectList(db.<#= property.EntitySetName #>, "<#= property.PrimaryKey #>", "<#= property.DisplayPropertyName #>", <#= modelVariable #>.<#= property.ForeignKeyPropertyName #>);
<# } #>
            return View(<#= modelVariable #>);
        }

        //
        // GET: <#= routePrefix #>Edit/5

        public ActionResult Edit(<#= primaryKey.ShortTypeName #> id = <#= primaryKey.DefaultValue #>)
        {
<# if(isObjectContext) { #>
            <#= modelName #> <#= modelVariable #> = db.<#= entitySetName #>.Single(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKey.Name #> == id);
<# } else { #>
            <#= modelName #> <#= modelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
            if (<#= modelVariable #> == null)
            {
                return HttpNotFound();
            }
<# foreach (var property in Model.RelatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyName #> = new SelectList(db.<#= property.EntitySetName #>, "<#= property.PrimaryKey #>", "<#= property.DisplayPropertyName #>", <#= modelVariable #>.<#= property.ForeignKeyPropertyName #>);
<# } #>
            return View(<#= modelVariable #>);
        }

        //
        // POST: <#= routePrefix #>Edit/5

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid)
            {
<# if(isObjectContext) { #>
                db.<#= entitySetName #>.Attach(<#= modelVariable #>);
                db.ObjectStateManager.ChangeObjectState(<#= modelVariable #>, EntityState.Modified);
<# } else { #>
                db.Entry(<#= modelVariable #>).State = EntityState.Modified;
<# } #>
                db.SaveChanges();
                return RedirectToAction("Index");
            }
<# foreach (var property in Model.RelatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyName #> = new SelectList(db.<#= property.EntitySetName #>, "<#= property.PrimaryKey #>", "<#= property.DisplayPropertyName #>", <#= modelVariable #>.<#= property.ForeignKeyPropertyName #>);
<# } #>
            return View(<#= modelVariable #>);
        }

        //
        // POST: <#= routePrefix #>Delete/5

        [HttpPost]
        public ActionResult Delete(<#= primaryKey.ShortTypeName #> id)
        {
<# if(isObjectContext) { #>
            <#= modelName #> <#= modelVariable #> = db.<#= entitySetName #>.Single(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKey.Name #> == id);
            db.<#= entitySetName #>.DeleteObject(<#= modelVariable #>);
<# } else { #>
            <#= modelName #> <#= modelVariable #> = db.<#= entitySetName #>.Find(id);
            db.<#= entitySetName #>.Remove(<#= modelVariable #>);
<# } #>
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            db.Dispose();
            base.Dispose(disposing);
        }
    }
}